attribute vec3 a_Position;
attribute vec2 a_TexCoord;
attribute vec3 a_Normal; 
attribute vec3 a_LightMapCoord;
attribute vec3 a_Tangent;
attribute vec3 a_Bitangent;

uniform mat4 u_Projection;
uniform mat4 u_Model;
uniform mat4 u_View;

uniform vec3 u_lightPos;
uniform vec3 u_lightColour;

struct pointLight
{
vec3 position;
vec3 colour;
};
uniform pointLight u_PointLights[4];
uniform vec3 u_CameraPos;


varying vec3 v_FragPos;

varying vec2 v_TexCoord;
varying vec3 v_Normal;
varying pointLight v_PointLights[4];
varying vec3 v_CameraPos;

varying vec3 v_TanFragPos;
varying pointLight v_TanPointLights[4];
varying vec3 v_TanCameraPos;
varying mat3 v_TBN;


void main() 
{ 
gl_Position = u_Projection * u_View * u_Model  * vec4(a_Position, 1.0);


vec3 T = normalize(vec3(u_Model * vec4(a_Tangent, 0.0)));
vec3 B = normalize(vec3(u_Model * vec4(a_Bitangent, 0.0)));
vec3 N = normalize(vec3(u_Model * vec4(a_Normal,    0.0)));
mat3 TBN = transpose(mat3(T, B, N));
v_TBN = TBN;

v_FragPos = vec3(u_Model * vec4(a_Position, 1.0));
v_TexCoord = a_TexCoord * 5;
v_Normal = normalize(a_Normal);

for(int i = 0; i < 4; ++i) 
{
	v_PointLights[i].position =  u_PointLights[i].position;
	v_PointLights[i].colour = u_PointLights[i].colour;
	
	v_TanPointLights[i].position = TBN * u_PointLights[i].position;
	v_TanPointLights[i].colour = u_PointLights[i].colour;

}
v_CameraPos = u_CameraPos;
v_TanCameraPos = TBN * u_CameraPos;
v_TanFragPos = TBN * vec3(u_Model * vec4(a_Position, 1.0));


} 
